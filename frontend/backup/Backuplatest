import { useState, useEffect, useRef, useMemo } from 'react';
import { usePrivy } from '@privy-io/react-auth';
import { createWalletClient, createPublicClient, custom, http, parseGwei } from 'viem';
import { ethers } from 'ethers';
import './App.css';
const contractAddress = import.meta.env.VITE_CONTRACT_ADDRESS;
const MONAD_TESTNET = {
  id: 10143,
  name: 'Monad Testnet',
  nativeCurrency: { name: 'Monad', symbol: 'MON', decimals: 18 },
  rpcUrls: { default: { http: ['https://testnet-rpc.monad.xyz'] } },
};
// Updated ABI to match the simplified contract
const abi = [
  "function startGame(uint8 difficulty, bytes32 commitmentHash) external payable returns (bytes32)",
  "function endGame(bytes32 gameId, bytes32 seed, bool won, uint8 tilesRevealed) external",
  "function forfeitGame(bytes32 gameId) external",
  "function getGameInfo(bytes32 gameId) external view returns (tuple(address player, uint256 bet, bool active, bytes32 commitmentHash, uint8 difficulty, uint256 startTimestamp))",
  "function getPlayerActiveGame(address player) external view returns (bytes32)",
  "function verifyGame(bytes32 gameId) external view returns (bool isValid, bytes32 originalCommitment, bytes32 recalculatedCommitment, bool[36] bombPositions)",
  "event GameStarted(bytes32 indexed gameId, address indexed player, uint256 bet, uint8 difficulty, bytes32 commitmentHash)",
  "event GameEnded(bytes32 indexed gameId, address indexed player, uint256 bet, uint256 payout, bool won, uint8 tilesRevealed, bytes32 seed)",
  "event GameForfeited(bytes32 indexed gameId, address indexed player)"
];

// Crypto utilities for client-side logic
function generateGameSeed() {
  return ethers.hexlify(ethers.randomBytes(32));
}

function createCommitmentHash(difficulty, seed) {
  const difficultyStr = difficulty === 0 ? "normal" : "god_of_war";
  // The seed from ethers.js includes a "0x" prefix. The contract's hashing
  // function constructs the hex string WITHOUT the "0x" prefix.
  // We must remove it here to ensure the client and contract hashes match.
  const seedForHashing = seed.substring(2);
  const gameData = JSON.stringify({
    version: "v1",
    difficulty: difficultyStr,
    seed: seedForHashing,
  });
  return ethers.keccak256(ethers.toUtf8Bytes(gameData));
}


// Game logic utilities
function generateBombPositions(seed, difficulty) {
  const numBombs = difficulty === 1 ? 12 : 9;
  const bombPositions = new Array(36).fill(false);

  // Simple deterministic bomb placement based on seed
  // This should match your contract's generateBombPositions function
  const seedBigInt = BigInt(seed);
  const positions = [];

  for (let i = 0; i < numBombs; i++) {
    const rowSeed = ethers.keccak256(ethers.concat([
      ethers.toBeArray(seed),
      ethers.toUtf8Bytes("-row"),
      ethers.toBeArray(i)
    ]));
    const position = parseInt(rowSeed.slice(-2), 16) % (36 / numBombs);
    const finalPosition = i * Math.floor(36 / numBombs) + position;
    if (finalPosition < 36) {
      bombPositions[finalPosition] = true;
    }
  }

  return bombPositions;
}
function calculateMultiplier(safeRevealed, numBombs) {
  let multiplier = 1.0;

  for (let i = 0; i < safeRevealed; i++) {
    const safeTiles = 36 - numBombs - i;
    const remainingTiles = 36 - i;
    const probability = safeTiles / remainingTiles;
    multiplier = multiplier / probability;
  }

  return multiplier;
}
function useTransaction() {
  const { user, ready } = usePrivy();
  const walletClient = useRef(null);
  const publicClient = useRef(null);
  const [isWalletReady, setIsWalletReady] = useState(false);
  const switchToMonadTestnet = async (provider) => {
    try {
      await provider.request({
        method: 'wallet_switchEthereumChain',
        params: [{ chainId: `0x${MONAD_TESTNET.id.toString(16)}` }],
      });
    } catch (switchError) {
      if (switchError.code === 4902) {
        try {
          await provider.request({
            method: 'wallet_addEthereumChain',
            params: [
              {
                chainId: `0x${MONAD_TESTNET.id.toString(16)}`,
                chainName: MONAD_TESTNET.name,
                nativeCurrency: MONAD_TESTNET.nativeCurrency,
                rpcUrls: MONAD_TESTNET.rpcUrls.default.http,
                blockExplorerUrls: ['https://testnet-explorer.monad.xyz'],
              },
            ],
          });
        } catch (addError) {
          console.error('Failed to add Monad Testnet:', addError);
          throw addError;
        }
      } else {
        console.error('Failed to switch to Monad Testnet:', switchError);
        throw switchError;
      }
    }
  };
  useEffect(() => {
    async function initWalletClient() {
      if (!ready || !user?.wallet?.address) {
        walletClient.current = null;
        publicClient.current = null;
        setIsWalletReady(false);
        return;
      }
      try {
        publicClient.current = createPublicClient({
          chain: MONAD_TESTNET,
          transport: http()
        });
        let provider = null;
        if (user.wallet?.getEthereumProvider) {
          provider = await user.wallet.getEthereumProvider();
        } else if (user.wallet?.getEthersProvider) {
          const ethersProvider = await user.wallet.getEthersProvider();
          provider = ethersProvider?.provider;
        } else if (user.wallet?.provider) {
          provider = user.wallet.provider;
        } else if (
          user.wallet?.walletClientType === 'metamask' ||
          user.wallet?.connectorType === 'injected'
        ) {
          provider = window.ethereum;
        }
        if (!provider) {
          throw new Error("No compatible provider found!");
        }
        await switchToMonadTestnet(provider);
        walletClient.current = createWalletClient({
          chain: MONAD_TESTNET,
          transport: custom(provider),
          account: user.wallet.address
        });
        setIsWalletReady(true);
      } catch (error) {
        console.error("Failed to initialize wallet client:", error);
        walletClient.current = null;
        publicClient.current = null;
        setIsWalletReady(false);
      }
    }
    initWalletClient();
  }, [user, ready]);
  async function sendTransactionAndConfirm({ to, data, gas, value = 0 }) {
    try {
      if (!walletClient.current || !publicClient.current) {
        throw new Error("Wallet client not initialized.");
      }
      if (!user?.wallet?.address) {
        throw new Error("User wallet address not available.");
      }
      const txHash = await walletClient.current.sendTransaction({
        to,
        account: user.wallet.address,
        data,
        gas: BigInt(gas),
        value: BigInt(value),
        maxFeePerGas: parseGwei('50'),
        maxPriorityFeePerGas: parseGwei('2'),
      });
      return txHash;
    } catch (error) {
      console.error("Error in sendTransactionAndConfirm:", error);
      throw error;
    }
  }
  return { walletClient, publicClient, sendTransactionAndConfirm, isWalletReady };
}
function App() {
  const { user, authenticated, login, logout } = usePrivy();
  const { walletClient, publicClient, sendTransactionAndConfirm, isWalletReady } = useTransaction();
  // Game state
  const [gameId, setGameId] = useState(null);
  const [gameActive, setGameActive] = useState(false);
  const [gameCommitmentHash, setGameCommitmentHash] = useState(null);
  const [gameSeed, setGameSeed] = useState(null);
  const [tiles, setTiles] = useState(Array(36).fill(0)); // 0: unrevealed, 1: safe, 2: bomb
  const [revealedTiles, setRevealedTiles] = useState(Array(36).fill(false));
  const [clickedTileSequence, setClickedTileSequence] = useState([]);
  const [bombPositions, setBombPositions] = useState(Array(36).fill(false));
  const [difficulty, setDifficulty] = useState(0); // 0 = NORMAL, 1 = GOD_OF_WAR
  const [selectedBet, setSelectedBet] = useState("0.25");
  const [status, setStatus] = useState("Awaiting command, Executor.");
  const [gameError, setGameError] = useState(false);
  const [gameErrorText, setGameErrorText] = useState("");
  const [isTransactionPending, setIsTransactionPending] = useState(false);
  const [gameEndedWithBomb, setGameEndedWithBomb] = useState(false);
  const [totalEarned, setTotalEarned] = useState(0);
  const [totalLost, setTotalLost] = useState(0);
  const [houseBalance, setHouseBalance] = useState(0);
  const [payoutLimitReached, setPayoutLimitReached] = useState(false);
  const contractInterface = useMemo(() => new ethers.Interface(abi), []);

  useEffect(() => {
    const fetchPlayerStats = async () => {
      // We only want to fetch stats when the wallet is connected and ready.
      if (!isWalletReady || !publicClient.current || !user?.wallet?.address) return;

      try {
        const allLogs = [];
        const latestBlock = await publicClient.current.getBlockNumber();
        const blockRange = 100n; 
        
        for (let fromBlock = 0n; fromBlock <= latestBlock; fromBlock += blockRange) {
          const toBlock = fromBlock + blockRange - 1n > latestBlock ? latestBlock : fromBlock + blockRange - 1n;
          
          const logs = await publicClient.current.getLogs({
            address: contractAddress,
            event: contractInterface.getEvent('GameEnded'),
            args: {
              player: user.wallet.address,
            },
            fromBlock,
            toBlock
          });
          allLogs.push(...logs.map(log => contractInterface.parseLog(log)));
        }

        let earned = 0;
        let lost = 0;

        for (const log of allLogs) {
          if (log.args.won) {
            earned += parseFloat(ethers.formatEther(log.args.payout));
          } else {
            lost += parseFloat(ethers.formatEther(log.args.bet));
          }
        }
        
        setTotalEarned(earned);
        setTotalLost(lost);

      } catch (error) {
        console.error("Failed to fetch player stats:", error);
      }
    };

    fetchPlayerStats();
  }, [isWalletReady, user?.wallet?.address]);

  useEffect(() => {
    // Generate a new seed and commitment hash whenever the difficulty changes,
    // but only if a game is not currently active.
    if (gameActive) return;

    const seed = generateGameSeed();
    setGameSeed(seed);
    const commitmentHash = createCommitmentHash(difficulty, seed);
    setGameCommitmentHash(commitmentHash);
  }, [gameActive, difficulty]);

  useEffect(() => {
    const fetchHouseBalance = async () => {
      if (publicClient.current) {
        try {
          const balance = await publicClient.current.getBalance({ address: contractAddress });
          setHouseBalance(parseFloat(ethers.formatEther(balance)));
        } catch (error) {
          console.error("Failed to fetch house balance:", error);
        }
      }
    };

    fetchHouseBalance();
    // Fetch intermittently to keep it updated
    const interval = setInterval(fetchHouseBalance, 10000);
    return () => clearInterval(interval);
  }, [publicClient.current]);

  useEffect(() => {
    if (!authenticated) {
      setStatus("Awaiting connection to Psionic Matrix.");
    } else if (!isWalletReady) {
      setStatus("Calibrating warp drives...");
    } else {
      setStatus("Nexus online. Awaiting command.");
    }
  }, [authenticated, isWalletReady]);

  // Start game
  const handleStartGame = async () => {
    try {
      setGameError(false);
      setGameErrorText("");
      setIsTransactionPending(true);
      if (!authenticated || !user?.wallet?.address) {
        setStatus("Psionic link not established. Connect your wallet.");
        return;
      }
      if (!isWalletReady || !walletClient.current || !publicClient.current) {
        setStatus("Wallet not synchronized. Please wait or refresh.");
        return;
      }
      if (!gameSeed || !gameCommitmentHash) {
        setStatus("Cannot generate commitment. Please select a difficulty.");
        return;
      }
      setStatus("Warp field stabilizing...");
      const betValue = ethers.parseEther(selectedBet);
      const data = contractInterface.encodeFunctionData("startGame", [difficulty, gameCommitmentHash]);
      
      const txHash = await sendTransactionAndConfirm({
        to: contractAddress,
        data,
        gas: 500000,
        value: betValue,
      });

      setStatus(`Receiving coordinates... ${txHash.slice(0, 10)}...`);
      const receipt = await publicClient.current.waitForTransactionReceipt({ hash: txHash });
      
      const parsedLogs = receipt.logs
        .map(log => {
          try {
            return contractInterface.parseLog(log);
          } catch (e) {
            return null;
          }
        })
        .filter(log => log !== null);
      
      const gameStartedEvent = parsedLogs.find(e => e.name === "GameStarted");
      if (!gameStartedEvent) {
        throw new Error("GameStarted event not found in transaction receipt.");
      }
      
      const receivedGameId = gameStartedEvent.args.gameId;
      
      setGameId(receivedGameId);
      setGameActive(true);
      setTiles(Array(36).fill(0));
      setRevealedTiles(Array(36).fill(false));
      setClickedTileSequence([]);
      setBombPositions(generateBombPositions(gameSeed, difficulty));
      setGameEndedWithBomb(false);
      setPayoutLimitReached(false); // Reset for new game
      setTotalLost(prev => prev + parseFloat(selectedBet));
      setStatus("Probe dispatched. Avoid hostile signatures.");

    } catch (err) {
      console.error("Error starting game:", err);
      setGameError(true);
      setGameErrorText(err.message);
      setStatus(`Warp-in failed: ${err.message}`);
    } finally {
      setIsTransactionPending(false);
    }
  };
  // Handle tile click (frontend logic)
  const handleTileClick = (pos) => {
    if (!gameActive || revealedTiles[pos] || isTransactionPending || payoutLimitReached) return;
    
    // Check if the next click would exceed the payout limit
    const nextTilesRevealed = clickedTileSequence.length + 1;
    const nextMultiplier = calculateMultiplier(nextTilesRevealed, numBombs);
    const godOfWarBonus = difficulty === 1 ? 1.5 : 1;
    const nextPotentialWin = (nextMultiplier * godOfWarBonus * 0.95) * parseFloat(selectedBet);
    
    if (houseBalance > 0 && nextPotentialWin >= (houseBalance * 0.20)) {
      setPayoutLimitReached(true);
      setStatus("Khala's light is fading! High energy readings detected. Recall your probe to secure resources.");
      // We still reveal the tile they just clicked, but they can't click any more.
    }
    
    if (bombPositions[pos]) {
      setGameEndedWithBomb(true);
      setStatus("Hostile signature detected! Probe compromised.");

      const newTiles = [...tiles];
      const newRevealed = [...revealedTiles];
      bombPositions.forEach((isBomb, index) => {
        if (isBomb) {
          newTiles[index] = 2; // Bomb
          newRevealed[index] = true;
        }
      });
      clickedTileSequence.forEach(tileIndex => {
        if (!bombPositions[tileIndex]) {
          newTiles[tileIndex] = 1; // Safe
          newRevealed[tileIndex] = true;
        }
      });
      setTiles(newTiles);
      setRevealedTiles(newRevealed);

      // End game instantly without blockchain transaction - but keep the exploded state
      setGameActive(false);
      return;
    }

    const newSequence = [...clickedTileSequence, pos];
    setClickedTileSequence(newSequence);
    const newRevealed = [...revealedTiles];
    newRevealed[pos] = true;
    setRevealedTiles(newRevealed);
    const newTiles = [...tiles];
    newTiles[pos] = 1; // Safe
    setTiles(newTiles);
    setStatus(`Sector ${pos + 1} clear. ${newSequence.length} sectors mapped.`);
  };

  const handleCashOut = async () => {
    if (!gameActive || clickedTileSequence.length === 0 || isTransactionPending) {
      setStatus("Recall signal blocked.");
      return;
    }
    await handleEndGame(true);
   };

  const handleEndGame = async (won) => {
    if (!isWalletReady || !walletClient.current || !publicClient.current) {
      setStatus("Wallet not synchronized.");
      return;
    }
    try {
      setIsTransactionPending(true);
      setStatus(won ? "Recalling probe..." : "Signal lost...");
      const data = contractInterface.encodeFunctionData("endGame", [
        gameId,
        gameSeed,
        won,
        clickedTileSequence.length,
      ]);
      const txHash = await sendTransactionAndConfirm({
        to: contractAddress,
        data,
        gas: 400000,
      });
      setStatus(`Awaiting confirmation from the Great Eye... ${txHash.slice(0, 10)}...`);
      const receipt = await publicClient.current.waitForTransactionReceipt({ hash: txHash });
      const parsedLogs = receipt.logs
         .map(log => {
           try {
             return contractInterface.parseLog(log);
           } catch (e) {
             return null;
           }
         })
         .filter(log => log !== null);
      const gameEndedEvent = parsedLogs.find(e => e.name === "GameEnded");

       if (gameEndedEvent) {
         const payout = parseFloat(ethers.formatEther(gameEndedEvent.args.payout));
         if (won) {
           setTotalEarned(prev => prev + payout);
           setStatus(`Probe recalled. ${payout.toFixed(4)} minerals acquired. We await your next command.`);
         } else {
           setStatus("Probe destroyed. The Swarm is relentless.");
         }
       }
      setGameActive(false);
      resetGame();
    } catch (err) {
      console.error("Error ending game:", err);
      setGameError(true);
      setGameErrorText(err.message);
      setStatus(`Recall failed: ${err.message}`);
    } finally {
      setIsTransactionPending(false);
    }
  };

  const resetGame = () => {
    setGameId(null);
    setClickedTileSequence([]);
    setTiles(Array(36).fill(0));
    setRevealedTiles(Array(36).fill(false));
    setBombPositions(Array(36).fill(false));
    setGameSeed(null);
    setGameCommitmentHash(null);
    setGameEndedWithBomb(false);
  };

  // Forfeit game
  const handleForfeit = async () => {
    if (!gameActive || !gameId || isTransactionPending) return;
    try {
      setIsTransactionPending(true);
      setStatus("Aborting mission...");
      const data = contractInterface.encodeFunctionData("forfeitGame", [gameId]);
      const txHash = await sendTransactionAndConfirm({
        to: contractAddress,
        data,
        gas: 200000,
      });
      setStatus(`Processing tactical retreat... ${txHash.slice(0, 10)}...`);
      await publicClient.current.waitForTransactionReceipt({ hash: txHash });
      setStatus("Probe self-destructed. A necessary sacrifice.");
      setGameActive(false);
      resetGame();
    } catch (err) {
      console.error("Error forfeiting game:", err);
      setGameError(true);
      setGameErrorText(err.message);
      setStatus(`Retreat failed: ${err.message}`);
    } finally {
      setIsTransactionPending(false);
    }
  };
  const isGameControlsEnabled = authenticated && isWalletReady && !isTransactionPending;
  const numBombs = difficulty === 1 ? 12 : 9;
  const currentMultiplier = calculateMultiplier(clickedTileSequence.length, numBombs);
  const godOfWarBonus = difficulty === 1 ? 1.5 : 1;
  const finalMultiplier = currentMultiplier * godOfWarBonus * 0.95;
  const potentialWin = finalMultiplier * parseFloat(selectedBet);
  return (
    <div className="min-h-screen w-full text-white flex flex-col justify-center items-center p-4 bg-cover bg-center" style={{ fontFamily: 'Roboto, sans-serif', backgroundImage: "url('https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/4a29a242-a796-4191-ae88-2cb5a8f40176/d3g3i7l-4a6cf837-16a3-4b47-9e73-d5a2d656096a.jpg/v1/fill/w_1280,h_760,q_75,strp/protoss_nexus_interior_by_phill_art_d3g3i7l-fullview.jpg?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIZDI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7ImhlaWdodCI6Ijw9NzYwIiwicGF0aCI6IlwvZlwvNGEyOWEyNDItYTc5Ni00MTkxLWFlODgtMmNiNWE4ZjQwMTc2XC9kM2czaTdsLTRhNmNmODM3LTE2YTMtNGI0Ny05ZTczLWQ1YTJkNjU2MDk2YS5qcGciLCJ3aWR0aCI6Ijw9MTI4MCJ9XV0sImF1ZCI6WyJ1cm46c2VydmljZTppbWFnZS5vcGVyYXRpb25zIl19.FqYw6Lh2d433FqK2a8bgP7hGzEx8i83n_gO3X3WvHj0')" }}>
      <div className="absolute inset-0 bg-black/60 backdrop-blur-sm"></div>
      <div className="relative z-10 w-full max-w-6xl border-2 border-[#00aeff]/50 bg-black/30 p-6 shadow-2xl shadow-[#00aeff]/20" style={{ clipPath: 'polygon(0 30px, 30px 0, calc(100% - 30px) 0, 100% 30px, 100% calc(100% - 30px), calc(100% - 30px) 100%, 30px 100%, 0 calc(100% - 30px))' }}>
        
        <h1 className="text-5xl font-bold mb-6 text-center text-[#fbd702] uppercase" style={{ fontFamily: 'Starcraft, sans-serif', textShadow: '0 0 10px #fbd702, 0 0 20px #fbd702' }}>
          Monsweeper
        </h1>

        {user && authenticated ? (
          <div className="text-center mb-4">
            <p className="text-[#00aeff]/80 text-sm mb-2">Executor Online: {user?.wallet?.address?.slice(0, 6)}...{user?.wallet?.address?.slice(-4)}</p>
            <button
              onClick={logout}
              className="bg-black/30 text-[#fbd702] font-semibold py-1 px-4 border border-[#fbd702]/50 hover:bg-[#fbd702]/20 transition-all duration-200"
              style={{ clipPath: 'polygon(10px 0, 100% 0, 100% 100%, 0 100%, 0 10px)' }}
            >
              // End Transmission //
            </button>
          </div>
        ) : (
          <div className="text-center mb-6">
            <button
              onClick={login}
              className="bg-gradient-to-br from-yellow-400 to-yellow-600 text-black font-bold py-3 px-8 hover:from-yellow-300 hover:to-yellow-500 transition-all duration-200 shadow-lg shadow-yellow-400/50"
              style={{ fontFamily: 'Starcraft, sans-serif', clipPath: 'polygon(15px 0, 100% 0, calc(100% - 15px) 100%, 0 100%)' }}
            >
              Link to Nexus
            </button>
          </div>
        )}

        {authenticated && (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          
          {/* Left Panel */}
          <div className="md:col-span-1 space-y-6">
            {/* Stats Panel */}
            <div className="p-4 bg-black/40 border border-[#00aeff]/30" style={{ clipPath: 'polygon(0 0, 100% 0, 100% calc(100% - 20px), calc(100% - 20px) 100%, 0 100%)' }}>
              <h3 className="text-xl font-bold text-[#fbd702] mb-3 border-b-2 border-[#fbd702]/50 pb-2" style={{ fontFamily: 'Starcraft, sans-serif' }}>Assimilation Report</h3>
              <div className="space-y-2 text-sm">
                <div>
                  <p className="text-[#00aeff]/70">Minerals Acquired</p>
                  <p className="text-lg font-bold text-green-400">＋{totalEarned.toFixed(4)}</p>
                </div>
                <div>
                  <p className="text-[#00aeff]/70">Combat Losses</p>
                  <p className="text-lg font-bold text-red-400">－{totalLost.toFixed(4)}</p>
                </div>
                <div>
                  <p className="text-[#00aeff]/70">Net Output</p>
                  <p className={`text-xl font-bold ${(totalEarned - totalLost) >= 0 ? 'text-green-400' : 'text-red-400'}`}>
                    {(totalEarned - totalLost) >= 0 ? '+' : ''}{(totalEarned - totalLost).toFixed(4)} MON
                  </p>
                </div>
              </div>
            </div>
            
            {/* Game Info Panel */}
            <div className="p-4 bg-black/40 border border-[#00aeff]/30" style={{ clipPath: 'polygon(0 0, 100% 0, 100% calc(100% - 20px), calc(100% - 20px) 100%, 0 100%)' }}>
              <h3 className="text-xl font-bold text-[#fbd702] mb-3 border-b-2 border-[#fbd702]/50 pb-2" style={{ fontFamily: 'Starcraft, sans-serif' }}>Probe Status</h3>
              <div className="grid grid-cols-2 gap-2 text-sm">
                <div>
                  <p className="text-[#00aeff]/70">Multiplier</p>
                  <p className="text-lg font-bold text-white">{gameActive ? finalMultiplier.toFixed(2) : "1.00"}x</p>
                </div>
                <div>
                  <p className="text-[#00aeff]/70">Potential Gain</p>
                  <p className="text-lg font-bold text-green-400">{gameActive ? potentialWin.toFixed(4) : "0.0000"}</p>
                </div>
                <div>
                  <p className="text-[#00aeff]/70">Sectors Mapped</p>
                  <p className="text-lg font-bold text-white">{clickedTileSequence.length}/{36 - numBombs}</p>
                </div>
                <div>
                  <p className="text-[#00aeff]/70">Hostiles</p>
                  <p className="text-lg font-bold text-red-400">{numBombs}</p>
                </div>
              </div>
              {gameActive && gameCommitmentHash && (
                <div className="mt-2">
                  <p className="text-[#00aeff]/70 text-xs">Commitment</p>
                  <p className="text-xs font-mono text-white/50 break-all">{gameCommitmentHash}</p>
                </div>
              )}
            </div>
          </div>

          {/* Center Panel: Game Board & Controls */}
          <div className="md:col-span-2 space-y-4">
            <div className="flex justify-center">
               <div className="grid grid-cols-6 gap-1 p-2 bg-black/50 border-2 border-[#00aeff]/30 shadow-[inset_0_0_15px_rgba(0,174,255,0.4)]" style={{ clipPath: 'polygon(5% 0, 95% 0, 100% 10%, 100% 90%, 95% 100%, 5% 100%, 0 90%, 0 10%)' }}>
                 {tiles.map((tile, index) => (
                    <button
                      key={index}
                      onClick={() => handleTileClick(index)}
                      className={`w-12 h-12 lg:w-14 lg:h-14 font-bold text-2xl flex justify-center items-center transition-all duration-200
                        ${!revealedTiles[index]
                          ? "bg-black/40 border-2 border-transparent hover:border-[#fbd702]/80 cursor-pointer"
                          : tile === 1
                            ? "bg-blue-900/70 border-2 border-[#00aeff] text-[#fbd702] cursor-default shadow-inner shadow-[#00aeff]"
                            : tile === 2
                              ? "bg-red-900/70 border-2 border-red-500 text-white cursor-default"
                              : "bg-black/20 cursor-default"
                        }
                        ${gameEndedWithBomb && bombPositions[index] && !revealedTiles[index]
                          ? "bg-red-500/40 border-red-400"
                          : ""
                        }
                        ${(!gameActive || isTransactionPending || payoutLimitReached || gameEndedWithBomb) ? "opacity-60 cursor-not-allowed" : ""}
                      `}
                     style={{ clipPath: 'polygon(20% 0%, 80% 0%, 100% 20%, 100% 80%, 80% 100%, 20% 100%, 0% 80%, 0% 20%)' }}
                     disabled={!gameActive || revealedTiles[index] || isTransactionPending || payoutLimitReached || gameEndedWithBomb}
                    >
                      {revealedTiles[index]
                       ? (tile === 2 ? '💥' : tile === 1 ? '💎' : "")
                       : (gameEndedWithBomb && bombPositions[index] ? '💥' : "")
                      }
                    </button>
                  ))}
               </div>
            </div>
            
             {/* Status Display */}
             <div className="text-center p-3 bg-black/40 border-y-2 border-[#00aeff]/30 h-20 flex items-center justify-center">
               <p className={`font-medium text-lg ${payoutLimitReached ? 'text-yellow-400 animate-pulse' : 'text-white'}`}>{status}</p>
               {gameError && (
                 <p className="text-red-400 mt-1 text-sm">{gameErrorText}</p>
               )}
             </div>

            {/* Game Controls */}
            {!gameActive && (
              <div className='flex flex-col items-center gap-4'>
                <div className="flex justify-center items-center gap-4">
                  <span className='font-bold text-[#fbd702]'>Threat Level:</span>
                   <button onClick={() => setDifficulty(0)} className={`font-bold py-2 px-4 border-2  transition-all duration-200 ${difficulty === 0 ? 'bg-[#fbd702] text-black border-[#fbd702]' : 'bg-transparent border-[#00aeff]/80 text-[#00aeff] hover:bg-[#00aeff]/20'}`} style={{ clipPath: 'polygon(10px 0, 100% 0, 100% 100%, 0 100%, 0 10px)' }} disabled={isTransactionPending}>Standard</button>
                   <button onClick={() => setDifficulty(1)} className={`font-bold py-2 px-4 border-2  transition-all duration-200 ${difficulty === 1 ? 'bg-[#fbd702] text-black border-[#fbd702]' : 'bg-transparent border-[#00aeff]/80 text-[#00aeff] hover:bg-[#00aeff]/20'}`} style={{ clipPath: 'polygon(0 0, calc(100% - 10px) 0, 100% 10px, 100% 100%, 0 100%)' }} disabled={isTransactionPending}>Critical</button>
                </div>
                <div className="flex justify-center items-center gap-2 flex-wrap">
                  <span className='font-bold text-[#fbd702]'>Mineral Cost:</span>
                   {["0.25", "0.5", "1", "3", "5", "10"].map((amount) => (
                     <button key={amount} onClick={() => setSelectedBet(amount)} className={`font-bold py-1 px-3 border transition-all duration-200 ${selectedBet === amount ? 'bg-[#fbd702] text-black border-yellow-400' : 'bg-transparent border-[#00aeff]/50 text-[#00aeff] hover:bg-[#00aeff]/20'}`} disabled={isTransactionPending}>{amount}</button>
                   ))}
                </div>
                 <button
                   onClick={handleStartGame}
                   className="w-full max-w-xs bg-gradient-to-r from-yellow-500 to-yellow-300 text-black font-bold py-3 px-10 shadow-lg shadow-yellow-400/30 hover:scale-105 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                   style={{ fontFamily: 'Starcraft, sans-serif' }}
                   disabled={!isGameControlsEnabled}
                 >
                   Warp In Probe
                 </button>
              </div>
            )}
            {gameActive && (
                 <div className="flex items-center justify-center gap-4 w-full">
                   <button
                     onClick={handleCashOut}
                     className="w-full max-w-xs bg-gradient-to-r from-green-500 to-green-300 text-black font-bold py-3 px-10 shadow-lg shadow-green-400/30 hover:scale-105 transition-all duration-200 disabled:bg-gray-600 disabled:text-gray-200 disabled:shadow-none disabled:hover:scale-100"
                     style={{ fontFamily: 'Starcraft, sans-serif' }}
                     disabled={!isGameControlsEnabled || clickedTileSequence.length === 0 || gameEndedWithBomb}
                   >
                     Recall Probe ({potentialWin.toFixed(4)})
                   </button>
                   <button
                     onClick={handleForfeit}
                     className="text-white/50 font-semibold py-2 px-6 rounded-lg hover:bg-white/10 transition-all duration-200 disabled:text-gray-500"
                     disabled={!isGameControlsEnabled}
                   >
                     Sacrifice
                   </button>
                 </div>
            )}
          </div>
        </div>
        )}
      </div>
    </div>
  );
}

export default App; 